#!/usr/bin/python

# CONSIDER: showing locks (from pg_locks)
# CONSIDER: have a different sampling and display interval (would mostly be for still having accurate recent list but being more readabile)

import time, datetime, os, sys, re

import psycopg2

import helpers_shellcolor as sc


# non-wrapping code adapts to console size changes
cols = None

def update_cols():
    global cols
    cols = sc.tty_size()['cols']

update_cols()

try:
    import signal
    signal.signal(signal.SIGWINCH,  lambda signum,sframe: update_cols() )
except: 
    raise
    pass



def nicetimelength(sec, long=False, joinon=' ', parts=2, future=''):
    """ Takes a relative amount of time (seconds as float/int, or a timedelta),
        returns a string like  '12min 47sec'.
    """
    if type(sec) is datetime.timedelta:       
       sec = sec.days*86400 + sec.seconds

    vals = [
        ('year',   'years',    'yr',   60.*60.*24.*365.      ),
        ('month',  'months',   'mo',   60.*60.*24.*30.6      ),
        ('week',   'weeks',    'wk',   60.*60.*24.*7         ),
        ('day',    'days',     'dy',   60.*60.*24.           ),
        ('hour',   'hours',    'hr',   60.*60.               ),
        ('minute', 'minutes',  'min',  60.                   ),
    ]
    ret=[]
    left = sec
    
    if left<0:
        ret.append(future)
        left = abs(left)
    
    roundme=False
    if left>10:
        roundme=True
    for one,many,shorts,insec in vals:
        if left>insec:
            howmany = int(left/insec)
            left -= howmany*insec
            if long:
                if howmany==1:
                    ret.append( '1 %s'%(one) )
                else:
                    ret.append( '%d %s'%(howmany,many) )
            else: # short form
                ret.append('%2d%-3s'%(howmany,shorts))
    if left>=0.:
        if roundme:
            if long:
                ret.append( '%d seconds'%(left) )
            else:
                ret.append( '%dsec'%(left) )
        else:
            if long:
                ret.append( '%.1f seconds'%(left) )
            else:
                ret.append( '%.1fsec'%( left ) )
    return joinon.join(ret[:parts])



def colorqtype(q):
    ' ANSI-colors a string based on the first word in the query '
    q = q.strip()
    if ' ' in q:
        first,tail = q.split(None,1) 
        tail = sc.darkgray(tail)
    else: # hacky
        first=q
        tail=''
    flow = first.lower()
    if flow=='select':
        return sc.yellow(first)+' '+tail 
    elif flow=='update':
        return sc.green(first)+' '+tail 
    elif flow=='insert':
        return sc.brightgreen(first)+' '+tail 
    elif flow=='delete':
        return sc.red(first)+' '+tail 
    elif flow=='commit':
        return sc.brightblue(first)+' '+tail 
    elif flow in ('vacuum', 'reindex',
                  'autovacuum:', 'analyse',
                  'create', 'drop',
                 ):
        return sc.magenta(first)+' '+tail 
    else:
        return first+' '+tail


    
def main():
    recent = {} # (starttime, pid) ->  (lastseen, query, state)

    from optparse import OptionParser    
    p = OptionParser() 
    p.add_option("-i", "--poll-interval",
                 dest="pollinterval", default='0.05',
                 help="Poll interval, in seconds. Defaults to 0.05.")
    p.add_option("-t", "--worktime-threshold",
                 dest="shortthresh", default='0.1',
                 help="Show only active/recent queries that took at least this many seconds. Higher will show only slower queries. Lower, like 0, shows most (but not all, because we're polling). Defaults to 0.1.")
    p.add_option("-f", "--forget-time",
                 dest="forgettime", default='30',
                 help="Forget recent queries after this many seconds. Defaults to 30")
    p.add_option("-r", "--max-recent",
                 dest="maxrecent", default='5',
                 help="Show at most this-many recent queries, e.g. to help avoid scrolling off the active ones. Defaults to 5.") 

    # options are   asis, reformat, or truncate (default) 
    p.add_option("-A", "--as-is-query",
                 dest="asisquery", default=False, action='store_true',
                 help="Default is to truncate to at most a line. This instead leaves the query formatted as reported to us")
    p.add_option("-R", "--reformat-query",
                 dest="splitquery", default=False, action='store_true',
                 help="Default is to truncate to at most a line. This instead splits on the major parts (select, from, where)")
    p.add_option("-T", "--no-truncate-query",
                 dest="truncquery", default=False, action='store_true',
                 help="Put as much of the query that fits on a single line, truncate the rest, so that we have some hope of showing all on a screen. Currently the default.")
    
    #p.add_option("-m", "--max-query-lines",
    #             dest="querylines", default='10',
    #             help="Show first this-many lines of the as-is or reformatted query. Defaults to 10.")
    
    p.add_option("-I", "--dont-ignore-boring",
                 dest="ignoreboring", default=True, action='store_false',
                 help="By default we ignore things like COMMIT, BEGIN, and ROLLBACK. This shows them.")
    options, args = p.parse_args()  # defaults to parsing sys.argv[1:].  May exit the program.
    
    ignore_boring        =       options.ignoreboring
    short_running_thresh = float(options.shortthresh)
    maxrecent            =   int(options.maxrecent)
    #maxlines             =   int(options.querylines)
    recent_seconds       = float(options.forgettime)
    interval_sec         = float(options.pollinterval)
    #print options.shortthresh, short_running_thresh
    splitquery     =       options.splitquery
    truncquery     =       options.truncquery
    asisquery      =       options.asisquery

    if not asisquery and not truncquery and not splitquery:
        truncquery = True    
    
    while True:
        conn = psycopg2.connect('dbname=postgres user=postgres host=localhost connect_timeout=5')
        curs = conn.cursor()
            
        curs.execute('SELECT NOW()')  # to print age based on server time and avoid timezone confusion
        now, = curs.fetchone()

        curs.execute('SHOW max_connections')  # to print age based on server time and avoid timezone confusion
        connlimit = int( curs.fetchone()[0] )
        
        # TODO: figure out which fits for which version. Seems to have changed a few times in 9, 10, and probably others
        # TODO: figure out all reasons that fields can be mostly NULL
        curs.execute("SELECT pid, datname, usename, xact_start, query_start, state, query,  wait_event, wait_event_type, backend_type  FROM pg_stat_activity")
        rows = curs.fetchall()
        curs.close()
        conn.close()
        
        print sc.clearscreen() # TODO: move back down
        
        connamt = 0
        actives, waitings_lock, waitings_other, idles, shorts, borings = 0, 0, 0, 0, 0, 0
        for pid, datname, username, xact_start, query_start, state, query,  we,wet, backend_type in rows:
            query=query.strip()
            # query time in seconds
            query_time = None
            if query_start:
                query_time = now - query_start#.replace(tzinfo=None)
                query_time = query_time.total_seconds()

            #print `pid, datname, username, xact_start, query_start, state, query,  we,wet, backend_type`
                
            if 'pg_stat_activity' in query: # self (or other statusgetter),
                continue # don't report
            
            #@ trying to ignore internal processes. Needs thinking.
            # 'autovacuum launcher', 'autovacuum worker', 'logical replication launcher', 'logical replication worker', 'parallel worker', 'background writer', 'client backend', 'checkpointer', 'startup', 'walreceiver', 'walsender', 'walwriter'
            if not 'worker' in backend_type and not 'client' in backend_type: # TODO: look at what each means.   CONSIDER: counting rest as internals
                continue
            if wet=='Activity': # This is for pg processes (we will be something like 'CheckpointerMain','BgWriterHibernate','WalWriterMain','AutoVacuumMain','LogicalLauncherMain')
                # and signals 'waiting for activity' i.e. idleness
                # I think these don't count towards connections, so we ignore them
                continue

            #print `pid, datname, username, xact_start, query_start, state, query,  we,wet, backend_type`
            
            connamt += 1 

            if state in ('idle',):
                # idles are counted, but not shown   (avoids 'last, not current query' confusion)
                idles+=1
                continue
            
            if 'xact_start' in query:  # self?   (check this)
                continue
            if 'xact_commit' in query: # pg_top? (check this)
                continue
            if query_start == None:    # unsure
                continue

            
            if state in ('active','working'):
                actives += 1
            
            if ignore_boring and query in ('COMMIT','BEGIN','ROLLBACK'):
                borings += 1
                continue
            
            is_short_running = (query_time < short_running_thresh)     # don't enter quickly-finished queries (ignore them completely,
            if is_short_running and not 'idle in transaction' in state:  # except for idle-in-transaction)
                shorts += 1
                continue
            
            if state in ('working','waiting','active', 'idle in transaction','idle in transaction (aborted)'): # the others seem to be 'idle', 'fastbath function call', 'disabled'
                recent[ (query_start,pid) ] = (now, query, state, username, datname, we, wet)            


        new = {} # will be next round's recent state
        toprint_iit    = []
        toprint_active = []
        toprint_recent = []
        items = recent.items()
        items.sort(lambda a, b: cmp(a[0][0],b[0][0]))
        for (starttime,pid),  (lastseen,query, state, username, datname, we, wet) in items:
            ### bookkeeping
            # dump old stuff  (still printed this round)
            # note that some logic counts on the above not putting in idle-state  in this data
            # and that we have our own memory of when it was active instead
            age          = (now-starttime ).total_seconds()
            inactive_age = (now-lastseen).total_seconds()
            if recent_seconds > inactive_age: # still printed but will be forgotten for the next round
                if not 'idle in transaction' in state: # iit should make it here (logic is easier) but never remembered
                    new[ (starttime,pid) ] = (lastseen,query, state, username, datname, we,wet)

            is_past = inactive_age > 0  # check whether that's quite how it reports
            is_iit  = 'idle in transaction' in state

            
            ### 
            msg = []

            state_s = ' %10s  '%state

            waiting = False
            waitingon = 'FIXME'
            #print state,we,wet,query
            # WET is broader category, WE is details?
            if not is_past and we!=None and state in ('working','active'): # (wait_event is details to various things, e.g. ClientRead for idle -
                # a bunch of these are waiting on events, not waiting while working
                # also, it looks like various were added around pg10)
                # there is overlap I'm trying to generalize, so order matters

                #print `pid, datname, username, state, query,  we,wet`
 
                if 'Lock' in wet: # including WAL lock
                    waitingon="wait:lock"
                    waitings_lock += 1
                elif 'wal' in we.lower():  # ...so this is mostly WAL IO?
                    waitingon="wait:WAL"
                    waitings_other += 1
                elif 'IO' in wet: # and this is mostly other IO?
                    waitingon="wait:IO"
                    waitings_other += 1
                elif 'Client' in wet:
                    waitingon="wait:client"
                    waitings_other += 1
                else:
                    waitingon='wait:%s'%wet
                    waitings_other += 1
                        
                #print 'WE:%r  WET:%r   state:%s'%(we,wet, state)
                waiting = True
                state_s = ' %10s  '%waitingon
            
            ### display logic
            # color state
            if is_past:
                state_s = ' '*13
            else:
                if waiting:
                    if 'client' in waitingon:  # some waiting may be more okay than others (but TODO: check reasons)
                        state_s = sc.yellow(state_s)
                    else: # otherwise it's bad
                        state_s = sc.red(state_s)
                elif is_iit: # you probably want to add some rollbacks
                    state_s = sc.orange(state_s)
                elif state in ('working','active'):
                    if age > 5.0:                                             # slow query
                        state_s = sc.red(state_s)
                    elif age > 1.0:
                        state_s = sc.orange(state_s)                          # slowish query
            msg.append( state_s )
            msg.append( sc.darkgray('%10s@%-10s'%(username,datname)) )
            msg.append( sc.darkgray('PID: %-10s'%pid) )
            msg.append( "Started %s ago"%( nicetimelength(age), ) )
            
            if inactive_age > 0:
                msg.append( "   took approx %7s"%(
                    #last seen %7s ago    nicetimelength(inactive_age),
                    nicetimelength(age-inactive_age)
                    ) )
            
            msg.append('\n')
            
            
            # try to split query in a readable way (put on parameter?)
            if truncquery:
                s = re.sub('\s+',' ', query.strip())
                havesize = cols-2
                if len(s) > havesize-3:
                    msg.append( colorqtype( s[:havesize-3]+'...') )
                else:
                    msg.append( colorqtype( s ) ) 
            elif splitquery:
                # don't want to build a proper parser, but this is a start:
                qlines = re.split('\s(?=FROM |WHERE |FULL OUTER JOIN |OUTER JOIN |INNER JOIN |LEFT JOIN |RIGHT JOIN |CROSS JOIN JOIN |ORDER BY |GROUP BY |HAVING )', query.strip(), flags = re.I)
                qparts=[]               
                for i,line in enumerate(list(line.strip()   for line in qlines)): #[:maxlines]
                    if i==0:
                        qparts.append( colorqtype(line) )
                    else:
                        qparts.append( sc.darkgray(line) )
                msg.append( '\n'.join(qparts) )
            elif asisquery:
                msg.append( colorqtype( query ) )
            else: # squeeze whitespace into spaces. Currently not used
                msg.append( colorqtype( re.sub(r'[\s]+', ' ', query) ) )

                
            # show in iit, active, or recent section?
            if is_iit:
                toprint_iit.append( ' '.join(msg) )
            else:
                if is_past:
                    if age-inactive_age > short_running_thresh:
                        toprint_recent.append( ' '.join(msg) )
                    else:
                        shorts += 1
                else:
                    toprint_active.append( ' '.join(msg) )




                    
                
        ### actually print
        #print sc.clearscreen()
        hdrline=[]
        hdrline.append('%d open connections (limit: %d)'%(connamt,  connlimit))
        hdrline.append('%d working,'%(actives))
        hdrline.append(sc.reset())
        msg = '%d waiting on lock,'%(waitings_lock)
        if len(toprint_iit)>5:
            hdrline.append( sc.red(msg) )        
        elif len(toprint_iit)>5:
            hdrline.append( sc.yellow(msg) )        
        else:
            hdrline.append( sc.green(msg) )        
        
        msg = '%d idle,'%(idles)
        if len(toprint_iit)>5:
            hdrline.append( sc.yellow(msg) )        
        else:
            hdrline.append( sc.green(msg) )        

        msg = '%d idle in transaction'%(len(toprint_iit))
        if len(toprint_iit)>5:
            hdrline.append( sc.red(msg) )        
        elif len(toprint_iit)>5:
            hdrline.append( sc.yellow(msg) )        
        else:
            hdrline.append( sc.green(msg) )        
        print sc.brightblue('     '.join(hdrline))

        print sc.brightblue("Ignored %d queries that ran shorter than %.1f seconds"%(shorts, short_running_thresh))
        #print sc.yellow("# Boring queries: %d"%borings)
        print
        print
        
        if len(toprint_iit)>0:
            print sc.red("# The more recent query in each of the %d idle in transaction connections:"%len(toprint_iit))
            for thing in toprint_iit:
                print thing
                print sc.magenta('- '*40) # separator
            print
            print
        
        print sc.green("# Active queries")
        if len(toprint_active)>0:
            for thing in toprint_active:
                print thing
                print sc.magenta('- '*40) # separator
        else:
            print "No active queries"
        
        
        if maxrecent>0 and len(toprint_recent)>0:
            print 
            print 
            print 
            print sc.cyan("# Recent queries  (up to %s  from the last %d seconds)"%(maxrecent, recent_seconds, ))
            for thing in toprint_recent[:maxrecent]:
                print thing
                print sc.magenta('- '*40) # separator
        
        
        recent = new
        
        time.sleep( interval_sec )

        
        
if __name__=='__main__':

    try: 
        import setproctitle         # I like my tmux titles informative
        setproctitle.setproctitle( os.path.basename(sys.argv[0]) )
    except ImportError:
        pass

    main()
